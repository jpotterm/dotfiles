" Pathogen
runtime bundle/pathogen/autoload/pathogen.vim
execute pathogen#infect()


if has("neovim")
    " System clipboard

    let s:python_host_init = 'python -c "import neovim; neovim.start_host()"'
    let &initpython = s:python_host_init
    let &initclipboard = s:python_host_init
    set unnamedclip " Automatically use clipboard as storage for the unnamed register


    " General

    set breakindent                   " Keep wrapped lines at same level
    set breakindentopt=shift:4        " Indent broken lines
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible                  " Get rid of Vi compatibility mode
filetype plugin on
filetype indent on

set number                        " Show line numbers
set linebreak                     " Break lines at word (requires Wrap lines)
set visualbell                    " Use visual bell (no beeping)

set nohlsearch                    " Don't highlight search results
set noshowmatch                   " Don't highlight matching bracket
set smartcase                     " Ignore case unless uppercase
set ignorecase                    " Always case-insensitive
set incsearch                     " Searches for strings incrementally

set autoindent                    " Auto-indent new lines
set expandtab                     " Use spaces instead of tabs
set shiftwidth=4                  " Number of auto-indent spaces
set smarttab                      " Enable smart-tabs
set tabstop=4                     " Displayed width of tabs
set softtabstop=4                 " Number of spaces per Tab

syntax on                         " Syntax highlighting
set t_Co=256                      " Enable 256-color mode
colorscheme solarized

set foldmethod=indent             " Fold based on indent
set foldignore=                   " Don't exempt blocks starting with #
set foldlevelstart=20             " Don't fold by default

set noesckeys                     " Make Escape key respond immediately

set ruler                         " Show row and column ruler information
set undolevels=1000               " Number of undo levels

set encoding=utf-8
set lazyredraw                    " Don't update display while executing macros
set autoread                      " Auto update if file has changed outside Vim
set showcmd                       " Show current command on status line
set wildmenu
set backspace=indent,start        " Backspace over indent and insert start
set laststatus=2                  " Always show status bar
set cursorline                    " Highlight the current line


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:ctrlp_map = ''
let g:ctrlp_working_path_mode = ''
let g:ctrlp_custom_ignore = {
    \ 'file': '\v\.(pyc|aux|bbl|blg|fdb_latexmk|lof|log|lot|toc|out|synctex\.gz)$',
    \ }

let g:loaded_matchparen = 1       " Don't highlight matching brackets

" Disable automatic comment insertion
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

runtime macros/matchit.vim        " Use matchit included with Vim

autocmd FileType htmldjango let b:surround_{char2nr("-")} = "{% \1Tag name: \1 %} \r {% end\1\1 %}"

let g:surround_indent = 0

let g:netrw_list_hide= '.*\.pyc$,.*\.swp$,^\.DS_Store$'
let g:netrw_preview = 1           " Vertical split preview

let NERDTreeIgnore = ['\.pyc$', '\.swp$', '^\.DS_Store$', '^\.git$', '\.orig$']
let NERDTreeShowHidden=1

" Python no double indent
let g:pyindent_open_paren = '&sw'
let g:pyindent_continue = '&sw'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keymaps
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = ","

nnoremap Y y$

" Use Ctrl-[hjkl] to select the active split
nnoremap <silent> <C-K> :wincmd k<CR>
nnoremap <silent> <C-J> :wincmd j<CR>
nnoremap <silent> <C-H> :wincmd h<CR>
nnoremap <silent> <C-L> :wincmd l<CR>

" Really unfold all
nnoremap <silent> zR :setlocal foldlevel=20<CR>

" Mac terminal interprets C-Space as C-@
inoremap <C-Space> <C-X><C-O>
inoremap <C-@> <C-X><C-O>

" CtrlP
nnoremap <silent> <leader>f :CtrlP<CR>
nnoremap <silent> <leader>b :CtrlPBuffer<CR>

" Save shortcut
nnoremap <silent> <leader>w :write<CR>

" Duplicate line
nnoremap <silent> <leader>d yyPj
vnoremap <silent> <leader>d yP`<

" Toggle NERDTree
nnoremap <silent> <leader>t :call WorkaroundNERDTreeToggle()<CR>

" Delete current buffer
nnoremap <silent> <leader>c :bp<bar>bd #<CR>

" Delete all buffers
nnoremap <leader>ca :1,2000 bd<CR>

" Toggle search highlighting
nnoremap <silent> <leader>/ :set hlsearch! hlsearch?<CR>

" Toggle diff mode
nnoremap <silent> <leader>df :call ToggleDiff()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -range DjangoTemplateSpaces <line1>,<line2>call DjangoTemplateSpaces()
command! -nargs=* ChangeIndentWidth call ChangeIndentWidth(<f-args>)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto Commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufWritePre * :call StripTrailingWhitespace()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! ToggleDiff()
    if &diff
        diffoff
        setlocal syntax=on
    else
        diffthis
        setlocal syntax=off
        setlocal wrap
    endif
endfunction

function! DjangoTemplateSpaces()
    function! SubLeft(line)
        return substitute(a:line, '{{\([^ ]\)', '{{ \1', "g")
    endfunction

    function! SubRight(line)
        return substitute(a:line, '\([^ ]\)}}', '\1 }}', "g")
    endfunction

    let line = getline(".")
    let cleanLine = SubRight(SubLeft(line))
    call setline(".", cleanLine)
endfunction

function! MapLines(f, lineNumbers)
    for i in a:lineNumbers
        let line = getline(i)
        let cleanLine = a:f(line)
        call setline(i, cleanLine)
    endfor
endfunction

function! StripTrailingWhitespace()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfunction

function! ChangeIndentWidth(old, new)
    let &l:tabstop=a:old
    setlocal noexpandtab
    %retab!
    let &l:tabstop=a:new
    setlocal expandtab
    %retab!
endfunction

function! WorkaroundNERDTreeToggle()
  try | :NERDTreeToggle | catch | :NERDTree | endtry
endfunction
